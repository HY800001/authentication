name: 处理 JSON 文件并加密

on:
  # 手动触发
  workflow_dispatch:
    inputs:
      json_file:
        description: '要处理的 JSON 文件路径'
        required: true
        default: 'data.json'
  
  # 定时触发（每天 UTC 时间 00:00）
  schedule:
    - cron: '0 0 * * *'
  
  # 当指定文件变化时触发
  push:
    paths:
      - 'data.json'
      - '*.json'

jobs:
  process-and-encrypt:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write  # 需要写权限以推送更改
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史
      
      - name: 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: 检查 RSA 密钥
        id: check-keys
        run: |
          if [ -f "public_key.pem" ]; then
            echo "has_key=true" >> $GITHUB_OUTPUT
            echo "✓ 发现现有公钥"
          else
            echo "has_key=false" >> $GITHUB_OUTPUT
            echo "⚠ 未找到公钥，将生成新密钥对"
          fi
      
      # - name: 从 Secrets 恢复公钥（如果存在）
      #   if: steps.check-keys.outputs.has_key == 'false'
      #   env:
      #     PUBLIC_KEY: ${{ secrets.RSA_PUBLIC_KEY }}
      #   run: |
      #     if [ ! -z "$PUBLIC_KEY" ]; then
      #       echo "$PUBLIC_KEY" > public_key.pem
      #       echo "✓ 已从 GitHub Secrets 恢复公钥"
      #     else
      #       echo "⚠ GitHub Secrets 中未配置公钥，将生成新密钥"
      #     fi
      
      - name: 处理 JSON 文件
        env:
          JSON_FILE: ${{ github.event.inputs.json_file || 'data.json' }}
        run: |
          echo "开始处理文件: $JSON_FILE"
          python process_json.py "$JSON_FILE" --public-key public_key.pem || python process_json.py "$JSON_FILE"
      
      - name: 检查文件变化
        id: check-changes
        run: |
          git diff --quiet . || echo "has_changes=true" >> $GITHUB_OUTPUT
          
          if [ -f "public_key.pem" ] && [ ! -f ".github/public_key.pem" ]; then
            # 如果生成了新密钥，备份到 .github 目录
            mkdir -p .github
            cp public_key.pem .github/public_key.pem
            echo "✓ 已备份公钥到 .github 目录"
          fi
      
      - name: 配置 Git
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
      
      - name: 提交并推送更改
        if: steps.check-changes.outputs.has_changes == 'true'
        env:
          JSON_FILE: ${{ github.event.inputs.json_file || 'data.json' }}
        run: |
          git add "$JSON_FILE" *_processed.json public_key.pem .github/ 2>/dev/null || true
          
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          git commit -m "🔐 自动处理 JSON: 添加时间戳和加密 ($TIMESTAMP)" \
                     -m "- 文件: $JSON_FILE" \
                     -m "- 操作: 添加时间戳 + RSA 加密" \
                     -m "- 触发方式: ${{ github.event_name }}"
          
          git push
          
          echo "✓ 成功推送更改到仓库"
      
      - name: 上传处理后的文件作为 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: processed-json-${{ github.run_number }}
          path: |
            *_processed.json
            public_key.pem
          retention-days: 30
      
      - name: 输出摘要
        run: |
          echo "## 🔐 JSON 处理完成" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 处理信息" >> $GITHUB_STEP_SUMMARY
          echo "- **文件**: \`${{ github.event.inputs.json_file || 'data.json' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **时间**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "- **触发方式**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.check-changes.outputs.has_changes }}" == "true" ]; then
            echo "✅ 文件已更新并推送到仓库" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ 没有检测到文件变化" >> $GITHUB_STEP_SUMMARY
          fi
